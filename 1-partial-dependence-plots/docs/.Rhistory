ice = TRUE,
type = "classification",
chull = TRUE,
train = preprocessed_training_set
plot = FALSE)
pd <- partial(object = xgb_model,
pred.var = c("Age"),
ice = TRUE,
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
xgb_model$raw
xgb_model$handle
model
predict(model, test_set)
predict(model, newdata = test_set)
debug(predict)
predict(model, newdata = test_set)
debug(makePrediction)
str(object)
set.seed(22)
library(data.table)
library(mlr)
library(magrittr)
library(ggplot2)
library(xgboost)
training_set <- fread("../../data/titanic/train.csv")
test_set  <- fread("../../data/titanic/test.csv")
training_set[, Pclass := as.factor(Pclass)]
test_set[, Pclass := as.factor(Pclass)]
training_set[, Sex := as.factor(Sex)]
test_set[, Sex := as.factor(Sex)]
training_set[, Embarked := as.factor(Embarked)]
test_set[, Embarked := as.factor(Embarked)]
training_set[, Survived := factor(x = Survived, labels = c("dead", "survived"))]
training_set[, PassengerId := NULL]
test_set[, PassengerId := NULL]
training_set[, Name := NULL]
test_set[, Name := NULL]
training_set[, Ticket := NULL]
test_set[, Ticket := NULL]
training_set[, Cabin := NULL]
test_set[, Cabin := NULL]
training_set <- as.data.frame(training_set)
test_set     <- as.data.frame(test_set)
classification_task <-
makeClassifTask(id = "titanic",
data = training_set,
target = "Survived",
positive = "survived")
learner <- makeLearner(cl = "classif.xgboost",
predict.type = "prob")
learner <- makeImputeWrapper(learner, cols = list(Age = imputeMedian(),
Fare = imputeMedian()))
learner <- makeDummyFeaturesWrapper(learner)
parameter_set <- makeParamSet(
makeDiscreteParam(id = "nrounds", values = 4:50),
makeDiscreteParam(id = "max_depth", values = 4:15),
makeDiscreteParam(id = "eta", values = seq(from = 0.1, to = 1, by = 0.1))
)
control <- makeTuneControlRandom(maxit = 100)
resampling <- makeResampleDesc(method = "CV", iters = 5,
stratify = TRUE)
hyperparameters <- tuneParams(learner = learner,
task = classification_task,
resampling = resampling,
par.set = parameter_set,
control = control,
measures = list(acc))
set.seed(22)
library(data.table)
library(mlr)
library(magrittr)
library(ggplot2)
library(xgboost)
training_set <- fread("../../data/titanic/train.csv")
test_set  <- fread("../../data/titanic/test.csv")
training_set[, Pclass := as.factor(Pclass)]
test_set[, Pclass := as.factor(Pclass)]
training_set[, Sex := as.factor(Sex)]
test_set[, Sex := as.factor(Sex)]
training_set[, Embarked := as.factor(Embarked)]
test_set[, Embarked := as.factor(Embarked)]
training_set[, Survived := factor(x = Survived, labels = c("dead", "survived"))]
training_set[, PassengerId := NULL]
test_set[, PassengerId := NULL]
training_set[, Name := NULL]
test_set[, Name := NULL]
training_set[, Ticket := NULL]
test_set[, Ticket := NULL]
training_set[, Cabin := NULL]
test_set[, Cabin := NULL]
training_set <- as.data.frame(training_set)
test_set     <- as.data.frame(test_set)
classification_task <-
makeClassifTask(id = "titanic",
data = training_set,
target = "Survived",
positive = "survived")
learner <- makeLearner(cl = "classif.xgboost",
predict.type = "prob")
learner <- makeImputeWrapper(learner, cols = list(Age = imputeMedian(),
Fare = imputeMedian()))
learner <- makeDummyFeaturesWrapper(learner)
parameter_set <- makeParamSet(
makeDiscreteParam(id = "nrounds", values = 4:50),
makeDiscreteParam(id = "max_depth", values = 4:15),
makeDiscreteParam(id = "eta", values = seq(from = 0.1, to = 1, by = 0.1))
)
control <- makeTuneControlRandom(maxit = 100)
resampling <- makeResampleDesc(method = "CV", iters = 5,
stratify = TRUE)
hyperparameters <- tuneParams(learner = learner,
task = classification_task,
resampling = resampling,
par.set = parameter_set,
control = control,
measures = list(acc))
optimal_learner <- setHyperPars(learner = learner,
par.vals = hyperparameters$x)
debug(xgboost:::xgb.get.DMatrix)
model <- train(optimal_learner, classification_task)
assign(x = "preprocessed_training_set", value = data, envir = .GlobalEnv)
# assign(x = "preprocessed_training_set", value = data, envir = .GlobalEnv)
# c
undebug(xgboost:::xgb.get.DMatrix)
debug(xgboost:::predict.xgb.Booster)
predictions <- predict(model, newdata = test_set)
str(object)
class(object)
assign(x = "preprocessed_test_set", value = newdata, envir = .GlobalEnv); assign(x = "xgb_model", value = object, envir = .GlobalEnv)
save(xgb_model, training_set, test_set,
preprocessed_training_set,
preprocessed_test_set,
file = "../xgboost-titanic.RData")
library(pdp)
library(magrittr)
load("../../0-model-to-explain/xgboost-titanic.RData")
set.seed(22)
pd <- partial(object = model,
pred.var = c("Age"),
ice = TRUE,
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
pd <- partial(object = xgb_model,
pred.var = c("Age"),
ice = TRUE,
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
library(pdp)
library(magrittr)
load("../../0-model-to-explain/xgboost-titanic.RData")
set.seed(22)
pd <- partial(object = xgb_model,
pred.var = c("Age"),
ice = TRUE,
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
librry(ggplot2)
library(ggplot2)
autoplot(pd, contour = TRUE, main = "Age influence",
legend.title = "Partial\ndependence")
autoplot(pd, main = "Age influence", legend.title = "Partial\ndependence")
autoplot(pd, main = "Age influence")
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
autoplot(pd, main = "Age influence")
autoplot(pd, main = "Age influence") +
theme_minimal() +
geom_hline(yintercept = 0, color = "red")
autoplot(pd) +
theme_minimal() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving")
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
prob = TRUE,
smooth = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age", "Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
smooth = TRUE,
train = preprocessed_training_set,
plot = FALSE)
pd <- partial(object = xgb_model,
pred.var = c("Age", "Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
smooth = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
autoplot(pd)
autoplot(pd, contour = TRUE)
ggplot(pd) +
geom_hex(mapping = aes(x = Age, y = Fare, fill = yhat))
head(pd)
ggplot(pd) +
geom_hex(mapping = aes(x = Age, y = Fare, fill = yhat))
ggplot(pd) +
geom_hex(mapping = aes(x = Age, y = Fare, color = yhat))
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, color = yhat))
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat))
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat), color = "white")
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat))
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = "prob surviving"))
yhat
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat))
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(low = "blue", mid = "white", high = "green")
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "blue", mid = "white", high = "green")
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "blue", mid = "white", high = "green") +
theme_minimal()
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "dark blue", mid = "white", high = "green") +
theme_minimal()
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "dark blue", mid = "white", high = "dark green") +
theme_minimal()
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "blue", mid = "white", high = "green") +
theme_minimal()
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "red", mid = "white", high = "green") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
setwd("~/poc-interpretability/1-partial-dependence-plots/docs")
library(pdp)
library(magrittr)
library(ggplot2)
load("../../0-model-to-explain/xgboost-titanic.RData")
set.seed(22)
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
prob = TRUE,
smooth = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Age influence", x = "age", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Fare influence", x = "fare", y = "probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age", "Fare"),
type = "classification",
chull = TRUE,
prob = TRUE,
smooth = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_tile(mapping = aes(x = Age, y = Fare, fill = yhat)) +
scale_fill_gradient2(midpoint = 0.5, low = "red", mid = "white", high = "green") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Age"),
type = "classification",
chull = TRUE,
prob = TRUE,
smooth = TRUE,
train = preprocessed_training_set,
plot = FALSE)
head(pd)
ggplot(pd) +
geom_line(aes(x = Age, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Age influence", x = "age", y = "predicted probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Pclass1"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
pd <- partial(object = xgb_model,
pred.var = c("Pclass.1"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_line(aes(x = Fare, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Fare influence", x = "fare", y = "predicted probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Pclass.1"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_line(aes(x = Pclass.1, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Pclass.1 influence", x = "Pclass.1", y = "predicted probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Pclass.1", "Pclass.2", "Pclass.3"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_bar(aes(x = Pclass.1, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Pclass.1 influence", x = "Pclass.1", y = "predicted probability of surviving") +
theme_minimal()
pd <- partial(object = xgb_model,
pred.var = c("Pclass.1"),
type = "classification",
chull = TRUE,
prob = TRUE,
train = preprocessed_training_set,
plot = FALSE,
smooth = TRUE)
ggplot(pd) +
geom_bar(aes(x = Pclass.1, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Pclass.1 influence", x = "Pclass.1", y = "predicted probability of surviving") +
theme_minimal()
ggplot(pd) +
geom_dotplot(aes(x = Pclass.1, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Pclass.1 influence", x = "Pclass.1", y = "predicted probability of surviving") +
theme_minimal()
ggplot(pd) +
geom_point(aes(x = Pclass.1, y = yhat)) +
geom_hline(yintercept = 0.5, color = "red") +
labs(title = "Pclass.1 influence", x = "Pclass.1", y = "predicted probability of surviving") +
theme_minimal()
