library(mlr)
library(dplyr)
library(purrr)
library(aplpack)
# Read data --------------------------------------------------------------------
training_set <- fread("../../data/titanic/train.csv")
test_set  <- fread("../../data/titanic/test.csv")
labels <- fread(file = "../../data/titanic/titanic-labels.csv")
labels <- labels[, .(name, age, survived)]
test_set_with_labels <- merge(x = test_set, y = labels,
by.x = c("Name", "Age"),
by.y = c("name", "age"),
all.x = TRUE, all.y = FALSE)
test_set <- test_set_with_labels
# Clean and transform data -----------------------------------------------------
training_set[, Pclass := as.factor(Pclass)]
test_set[, Pclass := as.factor(Pclass)]
training_set[, Sex := as.factor(Sex)]
test_set[, Sex := as.factor(Sex)]
training_set[, Embarked := as.factor(Embarked)]
test_set[, Embarked := as.factor(Embarked)]
training_set[, Survived := factor(x = Survived, labels = c("dead", "survived"))]
training_set[, PassengerId := NULL]
test_set[, PassengerId := NULL]
training_set[, Name := NULL]
test_set[, Name := NULL]
training_set[, Ticket := NULL]
test_set[, Ticket := NULL]
training_set[, Cabin := NULL]
test_set[, Cabin := NULL]
# Convert to data.frame --------------------------------------------------------
training_set <- as.data.frame(training_set)
test_set     <- as.data.frame(test_set)
# Create model -----------------------------------------------------------------
classification_task <-
makeClassifTask(id = "titanic",
data = training_set,
target = "Survived",
positive = "survived")
learner <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
learner <- makeImputeWrapper(learner, cols = list(Age = imputeMedian(),
Fare = imputeMedian()))
learner <- makeDummyFeaturesWrapper(learner = learner, method = "reference")
parameter_set <- makeParamSet(
makeDiscreteParam(id = "nrounds", values = 4:50),
makeDiscreteParam(id = "max_depth", values = 4:15),
makeDiscreteParam(id = "eta", values = seq(from = 0.1, to = 1, by = 0.1))
)
control <- makeTuneControlRandom(maxit = 100)
resampling <- makeResampleDesc(method = "CV", iters = 5,
stratify = TRUE)
hyperparameters <- tuneParams(learner = learner,
task = classification_task,
resampling = resampling,
par.set = parameter_set,
control = control,
measures = list(acc))
optimal_learner <- setHyperPars(learner = learner,
par.vals = hyperparameters$x)
model <- train(optimal_learner, classification_task)
other_models <- list()
pb <- progress_estimated(n = nrow(training_set))
for(i in 1:nrow(training_set)){
other_classification_task <-
makeClassifTask(id = paste0("titanic_", i),
data = training_set[-i,],
target = "Survived",
positive = "survived")
other_model <- train(optimal_learner, other_classification_task)
other_models <- append(other_models, list(other_model))
pb$tick()$print()
}
example_index <- 1
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_10_influencers <- order(abs(influence), decreasing = TRUE)[1:10]
test_set[example_index,] %>% mutate(survived_prob = prediction)
training_set[top_10_influencers,] %>% mutate(influence = influence[top_10_influencers])
all_predictions <- predict(model, newdata = test_set[, -which(colnames(test_set) == "survived")])
all_predictions <- as.integer(all_predictions$data$response == "survived")
cat("All failed predictions:\n")
which(test_set$survived != all_predictions)
test_set[test_set$survived != all_predictions,]
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_10_influencers <- order(abs(influence), decreasing = TRUE)[1:10]
test_set[example_index,] %>% mutate(survived_prob = prediction)
training_set[top_10_influencers,] %>% mutate(influence = influence[top_10_influencers])
faces(xy = training_set[1:10,])
str(training_set)
aux_train <- lapply(training_set, function(col) ifelse(is.factor(col), as.integer(col), col))
str(aux_train)
aux_train <- training_set
for(i in 1:ncol(aux_train)){
if(is.factor(aux_train[, i])){
aux_train[,i] = as.integer(aux_train[,i])
}
}
str(aux_train)
faces(aux_train[1:10,])
faces(aux_train[1:20,])
faces(xy = aux_train[1:20,], fill = TRUE)
faces(xy = aux_train[1:20,], fill = TRUE, na.rm = TRUE)
faces(xy = aux_train[1:20,], fill = TRUE, na.rm = TRUE, main = "Titanic passengers")
View(training_set)
fread("../../data/titanic/train.csv")
fread("../../data/titanic/train.csv") -> a
a <- fread("../../data/titanic/train.csv")
setwd("~/data-lab/poc-interpretability/6-leave-one-out-retraining/docs")
a <- fread("../../data/titanic/train.csv")
a$Name
passenger_names_train <- a$Name
b <- fread("../../data/titanic/test.csv")
passenger_names_test <- b$Name
faces(xy = aux_train[1:20,], fill = TRUE, na.rm = TRUE, main = "Titanic passengers", labels = passenger_names_train[1:20])
faces(xy = aux_train[1:20,], fill = TRUE, na.rm = FALSE, main = "Titanic passengers", labels = passenger_names_train[1:20])
df_face <- rbind(test_set[example_index,],
training_set[top_10_influencers,])
names(test_set)[names(test_set) == "survived"] <- "Survived"
df_face <- rbind(test_set[example_index,],
training_set[top_10_influencers,])
View(df_face)
df_face$Sex <- as.numeric(df_face$Sex == "male")
levels(a$Embarked)
a$Embarked
a$Embarked %>% unique()
df_face$Embarked <- ifelse(df_face$Embarked == "S", 1,
ifelse(df_face$Embarked == "C", 2,
ifelse(df_face$Embarked == "Q", 3, 0)))
View(df_face)
df_face$Survived <- ifelse(df_face$Survived == "survived" || df_face$Survived == 1, 1, 0)
View(df_face)
face
faces
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers")
View(df_face)
df_face$Pclass <- as.integer(df_face$Pclass)
View(df_face)
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers")
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "survived")])
test_set[example_index, -which(colnames(test_set) == "survived")]
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "survived")])
op <- op$data$prob.survived
op
})
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_8_influencers <- order(abs(influence), decreasing = TRUE)[1:8]
test_set[example_index,] %>% mutate(survived_prob = prediction)
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers])
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_8_influencers <- order(abs(influence), decreasing = TRUE)[1:8]
test_set[example_index,] %>% mutate(survived_prob = prediction)
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers])
df_face <- rbind(test_set[example_index,],
training_set[top_10_influencers,])
df_face$Sex <- as.numeric(df_face$Sex == "male")
df_face$Embarked <- ifelse(df_face$Embarked == "S", 1,
ifelse(df_face$Embarked == "C", 2,
ifelse(df_face$Embarked == "Q", 3, 0)))
df_face$Survived <- ifelse(df_face$Survived == "survived" || df_face$Survived == 1, 1, 0)
df_face$Pclass <- as.integer(df_face$Pclass)
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers")
df_face <- rbind(test_set[example_index,],
training_set[top_8_influencers,])
df_face$Sex <- as.numeric(df_face$Sex == "male")
df_face$Embarked <- ifelse(df_face$Embarked == "S", 1,
ifelse(df_face$Embarked == "C", 2,
ifelse(df_face$Embarked == "Q", 3, 0)))
df_face$Survived <- ifelse(df_face$Survived == "survived" || df_face$Survived == 1, 1, 0)
df_face$Pclass <- as.integer(df_face$Pclass)
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers")
names <- c(passenger_names_test[example_index], passenger_names_train[top_8_influencers])
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers", labels = names)
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
set.seed(22)
# Load libraries ---------------------------------------------------------------
library(data.table)
library(xgboost)
library(magrittr)
library(ggplot2)
library(mlr)
library(dplyr)
library(purrr)
library(aplpack)
# Read data --------------------------------------------------------------------
training_set <- fread("../../data/titanic/train.csv")
test_set  <- fread("../../data/titanic/test.csv")
labels <- fread(file = "../../data/titanic/titanic-labels.csv")
passenger_names_train <- training_set$Name
passenger_names_test  <- test_set$Name
labels <- labels[, .(name, age, survived)]
test_set_with_labels <- merge(x = test_set, y = labels,
by.x = c("Name", "Age"),
by.y = c("name", "age"),
all.x = TRUE, all.y = FALSE)
test_set <- test_set_with_labels
names(test_set)[names(test_set) == "survived"] <- "Survived"
# Clean and transform data -----------------------------------------------------
training_set[, Pclass := as.factor(Pclass)]
test_set[, Pclass := as.factor(Pclass)]
training_set[, Sex := as.factor(Sex)]
test_set[, Sex := as.factor(Sex)]
training_set[, Embarked := as.factor(Embarked)]
test_set[, Embarked := as.factor(Embarked)]
training_set[, Survived := factor(x = Survived, labels = c("dead", "survived"))]
training_set[, PassengerId := NULL]
test_set[, PassengerId := NULL]
training_set[, Name := NULL]
test_set[, Name := NULL]
training_set[, Ticket := NULL]
test_set[, Ticket := NULL]
training_set[, Cabin := NULL]
test_set[, Cabin := NULL]
# Convert to data.frame --------------------------------------------------------
training_set <- as.data.frame(training_set)
test_set     <- as.data.frame(test_set)
# Create model -----------------------------------------------------------------
classification_task <-
makeClassifTask(id = "titanic",
data = training_set,
target = "Survived",
positive = "survived")
learner <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
learner <- makeImputeWrapper(learner, cols = list(Age = imputeMedian(),
Fare = imputeMedian()))
learner <- makeDummyFeaturesWrapper(learner = learner, method = "reference")
parameter_set <- makeParamSet(
makeDiscreteParam(id = "nrounds", values = 4:50),
makeDiscreteParam(id = "max_depth", values = 4:15),
makeDiscreteParam(id = "eta", values = seq(from = 0.1, to = 1, by = 0.1))
)
control <- makeTuneControlRandom(maxit = 100)
resampling <- makeResampleDesc(method = "CV", iters = 5,
stratify = TRUE)
hyperparameters <- tuneParams(learner = learner,
task = classification_task,
resampling = resampling,
par.set = parameter_set,
control = control,
measures = list(acc))
optimal_learner <- setHyperPars(learner = learner,
par.vals = hyperparameters$x)
set.seed(22)
model <- train(optimal_learner, classification_task)
other_models <- list()
pb <- progress_estimated(n = nrow(training_set))
for(i in 1:nrow(training_set)){
other_classification_task <-
makeClassifTask(id = paste0("titanic_", i),
data = training_set[-i,],
target = "Survived",
positive = "survived")
set.seed(22)
other_model <- train(optimal_learner, other_classification_task)
other_models <- append(other_models, list(other_model))
pb$tick()$print()
}
example_index <- 1
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_10_influencers <- order(abs(influence), decreasing = TRUE)[1:10]
test_set[example_index,] %>% mutate(survived_prob = prediction)
training_set[top_10_influencers,] %>% mutate(influence = influence[top_10_influencers])
all_predictions <- predict(model, newdata = test_set[, -which(colnames(test_set) == "Survived")])
all_predictions <- as.integer(all_predictions$data$response == "survived")
cat("All failed predictions:\n")
which(test_set$survived != all_predictions)
all_predictions
all_predictions <- predict(model, newdata = test_set[, -which(colnames(test_set) == "Survived")])
all_predictions <- as.integer(all_predictions$data$response == "survived")
cat("All failed predictions:\n")
which(test_set$Survived != all_predictions)
test_set[test_set$survived != all_predictions,]
test_set[test_set$Survived != all_predictions,]
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_8_influencers <- order(abs(influence), decreasing = TRUE)[1:8]
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
example_index <- 130
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- other_predictions - prediction
top_8_influencers <- order(abs(influence), decreasing = TRUE)[1:8]
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
influence
abs(influence)
sort(abs(influence))
influence(order(abs(influence)))
influence[order(abs(influence))]
influence <- prediction - other_predictions
top_10_influencers <- order(abs(influence), decreasing = TRUE)[1:10]
test_set[example_index,] %>% mutate(survived_prob = prediction)
training_set[top_10_influencers,] %>% mutate(influence = influence[top_10_influencers])
example_index <- 71
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- prediction - other_predictions
top_8_influencers <- order(abs(influence), decreasing = TRUE)[1:8]
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
example_index <- 130
prediction <- predict(model, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
prediction <- prediction$data$prob.survived
other_predictions <- map_dbl(other_models, function(m){
op <- predict(m, newdata = test_set[example_index, -which(colnames(test_set) == "Survived")])
op <- op$data$prob.survived
op
})
influence <- prediction - other_predictions
top_8_influencers <- order(abs(influence), decreasing = TRUE)[1:8]
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View()
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View()
test_set[example_index,] %>% mutate(survived_prob = prediction) %>% View(title = "prediction")
training_set[top_8_influencers,] %>% mutate(influence = influence[top_8_influencers]) %>% View(title = "training influencers")
df_face <- rbind(test_set[example_index,],
training_set[top_8_influencers,])
df_face$Sex <- as.numeric(df_face$Sex == "male")
df_face$Embarked <- ifelse(df_face$Embarked == "S", 1,
ifelse(df_face$Embarked == "C", 2,
ifelse(df_face$Embarked == "Q", 3, 0)))
df_face$Survived <- ifelse(df_face$Survived == "survived" || df_face$Survived == 1, 1, 0)
df_face$Pclass <- as.integer(df_face$Pclass)
names <- c(passenger_names_test[example_index], passenger_names_train[top_8_influencers])
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers", labels = names)
df_face <- rbind(test_set[example_index,],
training_set[top_8_influencers,])
df_face$Sex <- as.numeric(df_face$Sex == "male")
df_face$Embarked <- ifelse(df_face$Embarked == "S", 1,
ifelse(df_face$Embarked == "C", 2,
ifelse(df_face$Embarked == "Q", 3, 0)))
df_face$Survived <- NULL
df_face$Pclass <- as.integer(df_face$Pclass)
names <- c(passenger_names_test[example_index], passenger_names_train[top_8_influencers])
faces(xy = df_face, fill = TRUE, na.rm = FALSE, main = "Titanic passengers", labels = names)
0.3567457+.3927793
str(other_models)
other_model$learner
other_model$learner.model
other_model$learner.model$control
other_model$learner.model$next.model
other_model$subset
other_model$
other_model$dump
other_model$features
str(other_model, max.level = 1)
str(other_model)
other_model$learner$next.learner$next.learner$par.set$pars$max_depth$values
other_model$learner$next.learner$next.learner$par.set$pars$max_depth
str(other_model)
other_model$learner.model$next.model$learner.model$next.model$learner.model$raw
other_model$learner.model$next.model$learner.model$next.model$learner.model$handle
xgboost_handle <-
other_model$learner.model$next.model$learner.model$next.model$learner.model$handle
xgb.model.dt.tree(xgboost_handle)
xgb.model.dt.tree(model = xgboost_handle)
str(other_model) -> a
a
other_model$learner.model$next.model$learner.model$next.model$learner.model$params
other_model$learner.model$next.model$learner.model$next.model$learner.model$call
xgboost_handle <-
other_model$learner.model$next.model$learner.model$next.model$learner.model$raw
xgboost_handle
xgboost::xgb.dump(model = xgboost_handle)
capture.output(str(other_model)) -> a
a
xgboost::xgb.dump(model = xgboost_handle)
stringr::str_detect(a, "xgb.Booster")
which(stringr::str_detect(a, "xgb.Booster"))
a[which(stringr::str_detect(a, "xgb.Booster"))]
which(stringr::str_detect(a, "xgb.Booster"))
a
capture.output(str(other_model), file = "fuck.txt")
xgbooster <-
other_model$learner.model$next.model$learner.model$next.model$learner.model
xgboost::xgb.dump(model = xgbooster)
xgboost::xgb.ggplot.deepness(model = xgbooster)
xgboost::xgb.plot.tree(model = xgbooster)
xgboost::xgb.model.dt.tree(model = xgbooster)
extract_booster <- function(mlr_model){
mlr_model$learner.model$next.model$learner.model$next.model$learner.model
}
xgbooster <- extract_booster(other_model)
xgboost::xgb.model.dt.tree(model = xgbooster)
booster_to_tree_structure <- function(xgb_booster){
xgboost::xgb.model.dt.tree(model = xgb_booster)
}
booster_to_tree_structure(xgbooster)
calculate_ntrees <- function(dt_tree_structure){
unique(dt_tree_structure$Tree) %>% length()
}
# capture.output(str(other_model), file = "fuck.txt")
# which(stringr::str_detect(a, "xgb.Booster"))
other_model %>%
extract_booster() %>%
booster_to_tree_structure() %>%
calculate_ntrees()
# capture.output(str(other_model), file = "fuck.txt")
# which(stringr::str_detect(a, "xgb.Booster"))
main_model_ntrees <-
other_model %>%
extract_booster() %>%
booster_to_tree_structure() %>%
calculate_ntrees()
# capture.output(str(other_model), file = "fuck.txt")
# which(stringr::str_detect(a, "xgb.Booster"))
main_model_ntrees <-
other_model %>%
extract_booster() %>%
booster_to_tree_structure() %>%
calculate_ntrees()
other_model_ntrees <-
map_dbl(other_models, ~ extract_booster(.x) %>%
booster_to_tree_structure() %>%
calculate_ntrees())
other_model_ntrees
which(other_model_ntrees != 22)
install.packages("exif")
library(exif)
exif::read_exif("~/Descargas/WhatsApp Image 2018-01-16 at 15.50.12.jpeg")
exif::read_exif("~/Descargas/WhatsApp\\ Image\\ 2018-01-16\\ at\\ 15.50.12.jpeg")
exif::read_exif("~/Descargas/angelchino.jpeg)
exif::read_exif("~/Descargas/angelchino.jpeg")
file <- system.file("extdata/dog_test_img.jpg", package="exif")
read_exif(file)
file
file <- system.file("~/Descargas/angelchino.jpeg")
file
read_exif("/home/josearcos/Descargas/angelchino.jpeg")
install.packages("exifr")
exifr::read_exif(path = "/home/josearcos/Descargas/angelchino.jpeg")
exifr::read_exif(path = "/home/josearcos/Descargas/angelchino.jpeg") -> a
View(a)
exifr::read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg") -> a
a
View(a)
exifr::read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg", recursive = TRUE, quiet = FALSE) -> a
exifr::read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg", recursive = TRUE) -> a
exifr::read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg") -> a
library(exifr)
read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg") -> a
read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg", recursive = TRUE) -> a
traceback
traceback()
read_exiaf(path = "/home/josearcos/Descargas/carmencomida.jpeg", recursive = TRUE) -> a
read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg", recursive = TRUE) -> a
read_exif(path = "/home/josearcos/Descargas/carmencomida.jpeg") -> a
View(a)
