build-last-errors="[]"
build-last-errors-base-dir=""
build-last-outputs="[]"
compile_pdf_state="{\"errors\":[],\"output\":\"\",\"running\":false,\"tab_visible\":false,\"target_file\":\"\"}"
files.monitored-path=""
find-in-files-state="{\"handle\":\"bb9be584346148e087c4d402d881c439\",\"input\":\"predict_\",\"path\":\"~/lime\",\"regex\":false,\"results\":{\"file\":[\"~/lime/man/model_support.Rd\",\"~/lime/man/model_support.Rd\",\"~/lime/man/model_support.Rd\",\"~/lime/man/model_support.Rd\",\"~/lime/man/model_support.Rd\",\"~/lime/README.md\",\"~/lime/R/dataframe.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/models.R\",\"~/lime/R/character.R\",\"~/lime/NAMESPACE\",\"~/lime/README.Rmd\"],\"line\":[5,9,24,35,43,29,106,6,21,33,48,49,51,56,68,88,96,97,15,53],\"lineValue\":[\"\\\\alias{predict_model}\",\"predict_model(x, newdata, type, ...)\",\"A data.frame in the case of \\\\code{predict_model()}. If \\\\code{type = 'raw'} it\",\"former it calls the \\\\code{predict_model()} generic which the user is free to\",\"predict_model.lda <- function(x, newdata, type, ...) {\",\"Out of the box `lime` supports models created using the `caret` and `mlr` frameworks. Support for other models are easy to achieve by adding a `predict_model` and `model_type` method for the given model.\",\"case_res <- predict_model(explainer$model, case_perm, type = o_type)\",\"#' former it calls the `predict_model()` generic which the user is free to\",\"#' @return A data.frame in the case of `predict_model()`. If `type = 'raw'` it\",\"#' predict_model.lda <- function(x, newdata, type, ...) {\",\"predict_model <- function(x, newdata, type, ...) {\",\"UseMethod('predict_model')\",\"predict_model.default <- function(x, newdata, type, ...) {\",\"predict_model.WrappedModel <- function(x, newdata, type, ...) {\",\"predict_model.xgb.Booster <- function(x, newdata, type, ...) {\",\"predict_model.lda <- function(x, newdata, type, ...) {\",\"predict_model.H2OModel <- function(x, newdata, type, ...){\",\"case_res <- predict_model(x = explainer$model, newdata = permutations_tokenized, type = o_type)\",\"export(predict_model)\",\"`predict_model` and `model_type` method for the given model.\"],\"matchOff\":[[15],[8],[42],[34],[8],[152],[20],[32],[48],[11],[8],[19],[8],[8],[8],[8],[8],[20],[15],[9]],\"matchOn\":[[7],[0],[34],[26],[0],[144],[12],[24],[40],[3],[0],[11],[0],[0],[0],[0],[0],[12],[7],[1]]},\"running\":false}"
imageDirtyState="1"
saveActionState="0"
