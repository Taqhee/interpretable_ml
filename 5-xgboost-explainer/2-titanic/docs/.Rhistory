max_depth = best_max_depth,
objective = "binary:logistic"),
data = xgb_train,
nrounds = best_nrounds)
predictions <- predict(model, xgb_test)
predictions
predictions <- as.numeric(predict(model, xgb_test) > 0.5)
predictions
submission <- fread("~/Descargas/gender_submission.csv")
head(submission)
submission$Survived <- predictions
nrow(test)
length(predictions)
s_test
s_train
nrow(train)
nrow(test)
nrow(s_dataset)
s_dataset <- sparse.model.matrix(~ - 1, data = dataset)
colnames(s_dataset)
nrow(s_dataset)
s_dataset <- sparse.model.matrix(~ . - 1, data = dataset)
colnames(s_dataset)
nrow(s_dataset)
complete.cases(dataset)
complete.cases(dataset) %>% sum()
library(data.table)
library(xgboost)
library(xgboostExplainer)
library(magrittr)
library(ggplot2)
library(Matrix)
train <- fread("../data/train.csv")
test  <- fread("../data/test.csv")
survived <- train$Survived
train[, Survived := NULL]
dataset <- rbind(train, test)
str(dataset)
dataset[, sum(is.na(Pclass))]
dataset[, sum(is.na(Sex))]
dataset[, sum(is.na(Embarked))]
dataset[, sum(is.na(Age))]
dataset[, sum(is.na(Age))]
dataset[is.na(Age), Age := median(Age, na.rm = TRUE)]
dataset[, sum(is.na(Age))]
dataset[, sum(is.na(Age))]
dataset[is.na(Age), Age := mean(Age, na.rm = TRUE)]
dataset[, sum(is.na(Age))]
str(dataset)
dataset[, sum(is.na(Age))]
median_age <- dataset[, median(Age, na.rm = TRUE)]
dataset[is.na(Age), Age := median_age]
dataset[, sum(is.na(Age))]
dataset[, sum(is.na(SibSp))]
dataset[, sum(is.na(Parch))]
dataset[, sum(is.na(Fare))]
dataset[, sum(is.na(SibSp))]
dataset[, sum(is.na(Parch))]
dataset[, sum(is.na(Fare))]
median_fare <- dataset[, median(Fare, na.rm = TRUE)]
dataset[is.na(Fare), Fare := median_fare]
dataset[, sum(is.na(Fare))]
s_dataset <- sparse.model.matrix(~ . - 1, data = dataset)
colnames(s_dataset)
nrow(s_dataset)
train <- fread("../data/train.csv")
test  <- fread("../data/test.csv")
survived <- train$Survived
train[, Survived := NULL]
dataset <- rbind(train, test)
str(dataset)
dataset[, PassengerId := NULL]
dataset[, Pclass := as.factor(Pclass)]
passenger_names <- dataset[, Name]
dataset[, Name := NULL]
dataset[, Sex := as.factor(Sex)]
dataset[, Ticket := NULL]
dataset[, Cabin := NULL]
dataset[, Embarked := as.factor(Embarked)]
str(dataset)
dataset[, sum(is.na(Age))]
median_age <- dataset[, median(Age, na.rm = TRUE)]
dataset[is.na(Age), Age := median_age]
dataset[, sum(is.na(Age))]
dataset[, sum(is.na(SibSp))]
dataset[, sum(is.na(Parch))]
dataset[, sum(is.na(Fare))]
median_fare <- dataset[, median(Fare, na.rm = TRUE)]
dataset[is.na(Fare), Fare := median_fare]
dataset[, sum(is.na(Fare))]
s_dataset <- sparse.model.matrix(~ . - 1, data = dataset)
colnames(s_dataset)
nrow(s_dataset)
s_train <- s_dataset[1:nrow(train),]
s_test  <- s_dataset[(nrow(train) + 1):nrow(s_dataset),]
train_target <- survived[1:nrow(train)]
train_target <- survived
xgb_train <- xgb.DMatrix(data = s_train, label = train_target)
xgb_test  <- xgb.DMatrix(data = s_test)
n_trials <- 20
max_depth_range <- 3:10
eta_range <- seq(from = 0.1, to = 1, by = 0.1)
max_depth_sample <- sample(x = max_depth_range, size = n_trials, replace = TRUE)
eta_sample <- sample(x = eta_range, size = n_trials, replace = TRUE)
results <- list()
for(i in 1:n_trials){
cv <- xgb.cv(params = list(booster = "gbtree",
eta = eta_sample[i],
max_depth = max_depth_sample[i],
objective = "binary:logistic"),
data = xgb_train,
nrounds = 100,
early_stopping_rounds = 5,
nfold = 4,
metrics = "error")
results <- append(results, list(cv$evaluation_log[cv$best_iteration,]))
cat("Iteration", i, "finished")
}
df_results <- do.call(rbind, results) %>% as.data.frame()
best_iteration <- which.min(df_results$test_error_mean)
best_max_depth <- max_depth_sample[best_iteration]
best_eta <- eta_sample[best_iteration]
cv <- xgb.cv(params = list(booster = "gbtree",
eta = best_eta,
max_depth = best_max_depth,
objective = "binary:logistic"),
data = xgb_train,
nrounds = 300,
early_stopping_rounds = 5,
nfold = 5)
best_nrounds <- cv$best_iteration
model <- xgb.train(params = list(booster = "gbtree",
eta = best_eta,
max_depth = best_max_depth,
objective = "binary:logistic"),
data = xgb_train,
nrounds = best_nrounds)
predictions <- as.numeric(predict(model, xgb_test) > 0.5)
submission <- fread("~/Descargas/gender_submission.csv")
submission$Survived <- predictions
fwrite("submission_titanic.csv")
fwrite(submission, file = "submission_titanic.csv")
explainer <- buildExplainer(xgb.model = model,
trainingData = xgb_train,
type = "binary")
showWaterfall(xgb.model = model, explainer = explainer, DMatrix = xgb_test,
data.matrix = s_test, idx = 1, type = "binary", threshold = 0.01)
showWaterfall(xgb.model = model, explainer = explainer, DMatrix = xgb_test,
data.matrix = s_test, idx = 1, type = "binary", threshold = 0.1)
exp(-4.08)
showWaterfall(xgb.model = model, explainer = explainer, DMatrix = xgb_test,
data.matrix = s_test, idx = 1, type = "binary", threshold = 0.1) +
theme_minimal()
showWaterfall(xgb.model = model, explainer = explainer, DMatrix = xgb_test,
data.matrix = s_test, idx = 2, type = "binary", threshold = 0.1) +
theme_minimal()
dataset[, mean(Fare)]
showWaterfall(xgb.model = model, explainer = explainer, DMatrix = xgb_test,
data.matrix = s_test, idx = 2, type = "binary", threshold = 0.1)
col_names = attr(xbg_train, ".Dimnames")[[2]]
col_names = attr(xgb_train, ".Dimnames")[[2]]
imp = xgb.importance(col_names, model)
xgb.plot.importance(imp)
prediction_breakdown <- explainPredictions(xgb.model = model,
explainer = explainer,
data = xgb_test)
prediction_breakdown$Age
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare, color = test$Sex))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare, color = test$Pclass))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Pclass)))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = test$Age))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Embarked)))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$SibSp)))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = test$SibSp))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = test$Parch))
log(3)
log(2)
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare)) +
geom_smooth(aes(test$Fare, prediction_breakdown$Fare))
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare)) +
geom_smooth(aes(test$Fare[-nrow(test)], prediction_breakdown$Fare[-nrow(test)]))
ggplot() +
geom_point(aes(test$Fare[-nrow(test)], prediction_breakdown$Fare[-nrow(test)])) +
geom_smooth(aes(test$Fare[-nrow(test)], prediction_breakdown$Fare[-nrow(test)]))
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare)) +
geom_smooth(aes(test$Fare[test$Fare < 500], prediction_breakdown$Fare[test$Fare < 500]))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = test$Age))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Age > 50)))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Age > 40)))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Age > 40))) +
geom_smooth(aes(x = test$Fare, y = test$Age))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Age > 40))) +
geom_smooth(aes(x = test$Fare, y = test$Age/100))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = as.factor(test$Age > 40))) +
geom_smooth(aes(x = test$Fare, y = test$Age/50))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = test$Age)) +
geom_smooth(aes(x = test$Fare, y = test$Age/50))
train <- dataset[1:nrow(train)]
test  <- dataset[(nrow(train) + 1):nrow(dataset),]
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare)) +
geom_smooth(aes(test$Fare[test$Fare < 500], prediction_breakdown$Fare[test$Fare < 500]))
ggplot() +
geom_point(aes(x = test$Fare, y = prediction_breakdown$Fare,
color = test$Age)) +
geom_smooth(aes(x = test$Fare, y = test$Age/50))
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare - prediction_breakdown$Age)) +
geom_smooth(aes(test$Fare[test$Fare < 500],
prediction_breakdown$Fare[test$Fare < 500] -
prediction_breakdown$Age[test$Fare < 500]))
ggplot() +
geom_point(aes(test$Fare, prediction_breakdown$Fare)) +
geom_smooth(aes(test$Fare[test$Fare < 500], prediction_breakdown$Fare[test$Fare < 500])) +
labs(x = "Fare", y = "Influence of Fare in survival probability")
ggplot() +
geom_point(aes(test$Age, prediction_breakdown$Age)) +
geom_smooth(aes(test$Age, prediction_breakdown$Age)) +
labs(x = "Age", y = "Influence of Age in survival probability")
ggplot() +
geom_point(aes(test$Age, prediction_breakdown$Age)) +
geom_smooth(aes(test$Age, prediction_breakdown$Age), method = "lm") +
labs(x = "Age", y = "Influence of Age in survival probability")
ggplot() +
geom_point(aes(test$Age, prediction_breakdown$Age)) +
geom_smooth(aes(test$Age, prediction_breakdown$Age), method = "glm") +
labs(x = "Age", y = "Influence of Age in survival probability")
ggplot() +
geom_point(aes(test$Age, prediction_breakdown$Age)) +
geom_smooth(aes(test$Age, prediction_breakdown$Age), method = "loess") +
labs(x = "Age", y = "Influence of Age in survival probability")
12.84+4.28
2.677*550
2.677*550+17.12
1472.5+17.12
1472.5/550
1472.5/550/0.8562
2.7/0.8562
2.7+3.073
(2.7+3.073)/2
3.07-2.887
ggplot() +
geom_point(aes(test$Age, prediction_breakdown$Fare)) +
geom_smooth(aes(test$Age, prediction_breakdown$Fare), method = "loess") +
labs(x = "Age", y = "Influence of Fare in survival probability")
ggplot() +
geom_point(aes(test$Age, prediction_breakdown$Sexmale)) +
geom_smooth(aes(test$Age, prediction_breakdown$Sexmale), method = "loess") +
labs(x = "Age", y = "Influence of Sex in survival probability")
ggplot() +
geom_point(aes(test$Age[test$Age < 70], prediction_breakdown$Sexmale[test$Age < 70])) +
geom_smooth(aes(test$Age[test$Age < 70], prediction_breakdown$Sexmale[test$Age < 70]),
method = "loess") +
labs(x = "Age", y = "Influence of Sex in survival probability")
ggplot() +
geom_point(aes(test$Age[test$Age < 70], prediction_breakdown$Sexmale[test$Age < 70])) +
geom_smooth(aes(test$Age[test$Age < 70], prediction_breakdown$Sexmale[test$Age < 70]),
method = "loess") +
labs(x = "Age", y = "Influence of Sex in survival probability")
library(stringr)
library(stringr)
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
diccionario <- c(a = "f",
b = "e",
c = "i",
d = "g",
e = "a",
f = "d",
g = "h",
h = "b",
i = "c")
criptograma[1]
diccionario[criptograma[1]]
criptograma[1] %>% str_split()
library(magrittr)
criptograma[1] %>% str_split()
criptograma[1] %>% str_split(pattern = "")
criptograma[1] %>% str_split(pattern = "") %>% unlist()
diccionario[criptograma[1] %>% str_split(pattern = "") %>% unlist()]
criptograma_split <- map(criptograma, ~ str_split(., pattern = ""))
library(tidyverse)
criptograma_split <- map(criptograma, ~ str_split(., pattern = ""))
str(criptograma_split)
a <- unlist(criptograma_split)
a
unique(a)
unique(a) %>% length()
criptograma_split <- map(criptograma, ~ str_split(., pattern = "") %>% unlist())
str(criptograma_split)
length(LETTERS)
diccionario[criptograma[1] %>% str_split(pattern = "") %>% unlist()]
letters
sort(unique(a))
unique(a) %>% length()
criptograma_split[1][order1]
order1 <- c(7,8,2,5,6,1,9,3,4)
criptograma_split[1][order1]
criptograma_split[1]
criptograma_split <- map(criptograma, ~ str_split(., pattern = "") %>% unlist())
order1 <- c(7,8,2,5,6,1,9,3,4)
criptograma_split[1][order1]
criptograma_split[1]
unlist(criptograma_split[1])[order1]
unlist(criptograma_split[1])[order1]
unlist(criptograma_split[2])[order2]
unlist(criptograma_split[3])[order3]
order2 <- c(5,3,4,7,1,9,2,6,8)
order3 <- c(3,5,8,2,9,6,4,7,1)
unlist(criptograma_split[1])[order1]
unlist(criptograma_split[2])[order2]
unlist(criptograma_split[3])[order3]
col1 <- c("F","E","I","G","A","D","H","B","C")
col2 <- c("C","G","D","B","I","H","A","E","F")
col3 <- c("H","B","A","F","E","C","G","I","D")
order1t <- order(col1)
order2t <- order(col2)
order3t <- order(col3)
unlist(criptograma_split[1])[order1t]
unlist(criptograma_split[2])[order2t]
unlist(criptograma_split[3])[order3t]
raw_sudoku <- "FCHIDEABGEGBCAHDIFIDAGBFHCEGBFACIEDHAIEHFDCGBDHCBEGFAIHAGFICBEDBEIDHAGFCCFDEGBIHA"
sudoku <- matrix(data = str_split(string = raw_sudoku, pattern = ""), nrow = 9, byrow = TRUE)
sudoku
str_split(string = raw_sudoku, pattern = "")
sudoku <- matrix(data = unlist(str_split(string = raw_sudoku, pattern = "")), nrow = 9, byrow = TRUE)
sudoku
# Reorder using row permutations
row_orders <- map(1:9, ~ order(sudoku[.,]))
row(orders)
row_orders
col_orders <- map(1:9, ~ order(sudoku[,.]))
str(criptograma_split)
criptograma_rows <- map2(criptograma_split, row_orders, ~ .x[.y])
criptograma_rows <- map2(criptograma_split[1:18], row_orders, ~ .x[.y])
str(row_orders)
c(row_orders, row_orders) %>% str
criptograma_rows <- map2(criptograma_split[1:18], c(row_orders, row_orders), ~ .x[.y])
criptograma_rows
criptograma_cols <- map2(criptograma_split[1:18], c(col_orders, col_orders), ~ .x[.y])
criptograma_cols
col_orders
criptograma_cols <- map2(criptograma_split[1:18], c(col_orders, col_orders), ~ .x[.y])
criptograma_cols
criptograma_split[15][col_orders[15]]
criptograma_split[[15]][col_orders[[15]]]
criptograma_split[[15]][col_orders[[6]]]
criptograma_split[[15]]
col_orders[[6]]
criptograma_split
criptograma <- c("ibrrgqeaq", "rbgvafanr", "rfznnngfe",
"pqbpcrfvr", "aenbycnbq", "hffpfdnbr",
"bvfrpquav", "efrcydnbh", "gdprhvufv",
"hhnfvrdfr", "ynnygzfnr", "neennnegf",
"bnaviycrf", "gfbvvybnf", "rfgrfihay",
"fkbncerny", "qprarffnh", "mhreosrvy",
"fnnrvaqiq")
criptograma_split <- map(criptograma, ~ str_split(., pattern = "") %>% unlist())
raw_sudoku <- "FCHIDEABGEGBCAHDIFIDAGBFHCEGBFACIEDHAIEHFDCGBDHCBEGFAIHAGFICBEDBEIDHAGFCCFDEGBIHA"
sudoku <- matrix(data = unlist(str_split(string = raw_sudoku, pattern = "")), nrow = 9, byrow = TRUE)
# Reorder using row and column permutations
row_orders <- map(1:9, ~ order(sudoku[.,]))
col_orders <- map(1:9, ~ order(sudoku[,.]))
criptograma_rows <- map2(criptograma_split[1:18], c(row_orders, row_orders), ~ .x[.y])
criptograma_cols <- map2(criptograma_split[1:18], c(col_orders, col_orders), ~ .x[.y])
criptograma_rows
criptograma_cols
# Letter density
all_letters <- unlist(criptograma_split)
all_letters
table(all_letters)
as.numeric(all_letters)
A -1
charToRaw(all_letters)
map(all_letters, charToRaw)
criptograma_rows
table(all_letters)
criptograma_rows[[1]]
# Convert characters to raw
criptograma_rows_raw <- map(criptograma_rows, ~ map_int(.x, charToRaw))
# Convert characters to raw
criptograma_rows_raw <- map(criptograma_rows, ~ map_int(.x, charToRaw))
# Convert characters to raw
criptograma_rows_raw <- map(criptograma_rows, ~ map(.x, charToRaw) %>% unlist())
criptograma_rows_raw
# Convert characters to raw
criptograma_rows_raw <- map_int(criptograma_rows, ~ map(.x, charToRaw) %>% unlist())
str(criptograma_rows)
str(criptograma_rows_raw)
criptograma_cols_raw <- map(criptograma_cols, ~ map(.x, charToRaw) %>% unlist())
str(criptograma_cols_raw)
criptograma_rows_raw[[1]]
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, ~ . - 1)
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, ~ as.integer(.) - 1)
solution_rows_left
charToRaw("a")
charToRaw("z")
charToRaw("z") %>% as.integer()
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
if(val == 60)
val <- 122
as.raw(val)
})
warnings()
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
val[val == 60] <- 122
as.raw(val)
})
solution_rows_left
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
val[val == 60] <- 122
as.character(as.raw(val))
})
solution_rows_left
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
val[val == 60] <- 122
rawToChar(as.raw(val))
})
solution_rows_left
charToRaw("z") %>% as.integer()
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
val[val == 60] <- 122
print(val)
rawToChar(as.raw(val))
})
rawToChar(as.raw(122))
rawToChar(as.raw(120))
charToRaw("`")
solution_rows_left
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
val[val == 60] <- 122
print(val)
rawToChar(as.raw(val))
})
# Move one to the left?
solution_rows_left <- map(criptograma_rows_raw, function(x){
val <- as.integer(x) - 1
val[val == 60] <- 122
print(x)
print(val)
print(as.raw(val))
rawToChar(as.raw(val))
})
a <- raw(60)
a
a <- as.raw("6a")
a
table(all_letters)
hist(all_letters)
letters[23]
criptograma_rows
sudoku
criptograma_rows
criptograma_cols
map(criptograma_split, ~ sort(.))
map(criptograma_split, ~ sort(.))
map(criptograma_split, ~ paste0(sort(.), collapse = ""))
map(criptograma_split, ~ paste0(sort(.), collapse = "")) %>% unlist()
map(criptograma_split, ~ paste0(sort(.), collapse = "")) %>% unlist() %>% sort()
getwd()
