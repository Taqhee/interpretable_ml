age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
set.seed(22)
permutation <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set[, "Age"] <- preprocessed_test_set[permutation, "Age"]
predictions <- predict(xgb_model, preprocessed_test_set)
predictions <- as.integer(predictions > 0.5)
acc_age <-
sum(predictions == test_set$survived, na.rm = TRUE) / length(predictions)
age_importance <- acc_ref - acc_age
age_importance
library(tidyverse)
library(ggplot2)
load("../../0-model-to-explain/xgboost-titanic.RData")
predictions_ref <- predict(xgb_model, preprocessed_test_set)
predictions_ref <- as.integer(predictions_ref > 0.5)
acc_ref <-
sum(predictions_ref == test_set$survived, na.rm = TRUE) /
length(predictions_ref)
acc_ref
set.seed(22)
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importance <- acc_age - acc_ref
age_importance
set.seed(22)
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importance <- acc_age - acc_ref
age_importance
set.seed(22)
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importance <- acc_age - acc_ref
age_importance
set.seed(22)
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importance <- acc_age - acc_ref
age_importance
n_permutations <- 100
age_importances <- numeric(n_permutations)
set.seed(22)
n_permutations <- 100
age_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importances[i] <- acc_age - acc_ref
}
age_importance <- mean(age_importances)
age_importance
n_permutations <- 100
age_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importances[i] <- acc_age - acc_ref
}
age_importances
n_permutations <- 100
age_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation_age, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importances[i] <- acc_age - acc_ref
}
age_importance <- mean(age_importances)
age_importance
age_importances
n_permutations <- 100
age_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation_age, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importances[i] <- acc_ref - acc_age
}
age_importance <- mean(age_importances)
age_importance
n_permutations <- 100
age_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_age <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_age <- preprocessed_test_set
preprocessed_test_set_age[, "Age"] <-
preprocessed_test_set_age[permutation_age, "Age"]
predictions_age <- predict(xgb_model, preprocessed_test_set_age)
predictions_age <- as.integer(predictions_age > 0.5)
acc_age <-
sum(predictions_age == test_set$survived, na.rm = TRUE) /
length(predictions_age)
age_importances[i] <- acc_ref - acc_age
}
age_importance <- mean(age_importances)
age_importance
age_importances
n_permutations <- 100
fare_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_fare <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_fare <- preprocessed_test_set
preprocessed_test_set_fare[, "Fare"] <-
preprocessed_test_set_fare[permutation_fare, "Fare"]
predictions_fare <- predict(xgb_model, preprocessed_test_set_fare)
predictions_fare <- as.integer(predictions_fare > 0.5)
acc_fare <-
sum(predictions_fare == test_set$survived, na.rm = TRUE) /
length(predictions_fare)
fare_importances[i] <- acc_ref - acc_fare
}
fare_importance <- mean(fare_importances)
fare_importance
n_permutations <- 100
fare_importances <- numeric(n_permutations)
set.seed(22)
for(i in 1:n_permutations){
permutation_fare <- sample(x = 1:nrow(preprocessed_test_set))
preprocessed_test_set_fare <- preprocessed_test_set
preprocessed_test_set_fare[, "Fare"] <-
preprocessed_test_set_fare[permutation_fare, "Fare"]
predictions_fare <- predict(xgb_model, preprocessed_test_set_fare)
predictions_fare <- as.integer(predictions_fare > 0.5)
acc_fare <-
sum(predictions_fare == test_set$survived, na.rm = TRUE) /
length(predictions_fare)
fare_importances[i] <- acc_ref - acc_fare
}
fare_importance <- mean(fare_importances)
fare_importance
fare_importance
fare_importances
View(preprocessed_test_set_fare)
feature_importance <- function(feature_name, test_data,
labels, n_permutations){
importances <- numeric(n_permutations)
for(i in 1:n_permutations){
permutation <- sample(x = 1:nrow(test_data))
test_data[, "Fare"] <- test_data[permutation, "Fare"]
predictions <- predict(xgb_model, test_data)
predictions <- as.integer(predictions > 0.5)
acc <- sum(predictions == labels, na.rm = TRUE) / length(predictions)
importances[i] <- acc_ref - acc_fare
}
mean(importances)
}
feature_importance <- function(feature_name, test_data, model,
labels, n_permutations){
importances <- numeric(n_permutations)
for(i in 1:n_permutations){
permutation <- sample(x = 1:nrow(test_data))
test_data[, "Fare"] <- test_data[permutation, "Fare"]
predictions <- predict(model, test_data)
predictions <- as.integer(predictions > 0.5)
acc <- sum(predictions == labels, na.rm = TRUE) / length(predictions)
importances[i] <- acc_ref - acc_fare
}
mean(importances)
}
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300)
feature_importance(feature_name = "Age",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300)
feature_importance <- function(feature_name, test_data, model,
labels, n_permutations){
importances <- numeric(n_permutations)
feat_index <- which(colnames(test_data) == feature_name)
for(i in 1:n_permutations){
permutation <- sample(x = 1:nrow(test_data))
test_data[, feat_index] <- test_data[permutation, feat_index]
predictions <- predict(model, test_data)
predictions <- as.integer(predictions > 0.5)
acc <- sum(predictions == labels, na.rm = TRUE) / length(predictions)
importances[i] <- acc_ref - acc_fare
}
mean(importances)
}
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300)
feature_importance(feature_name = "Age",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300)
feature_importance <- function(feature_name, test_data, model,
labels, n_permutations, acc_ref){
importances <- numeric(n_permutations)
feat_index <- which(colnames(test_data) == feature_name)
for(i in 1:n_permutations){
permutation <- sample(x = 1:nrow(test_data))
test_data[, feat_index] <- test_data[permutation, feat_index]
predictions <- predict(model, test_data)
predictions <- as.integer(predictions > 0.5)
acc <- sum(predictions == labels, na.rm = TRUE) / length(predictions)
importances[i] <- acc_ref - acc
}
mean(importances)
}
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300,
acc_ref = acc_ref)
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300,
acc_ref = acc_ref)
set.seed(22)
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300,
acc_ref = acc_ref)
set.seed(22)
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300,
acc_ref = acc_ref)
set.seed(22)
fare_importance <-
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 300,
acc_ref = acc_ref)
fare_importance
set.seed(22)
fare_importance <-
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
fare_importance
set.seed(23)
fare_importance <-
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
fare_importance
set.seed(23)
fare_importance <-
feature_importance(feature_name = "Fare",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
fare_importance
set.seed(23)
age_importance <-
feature_importance(feature_name = "Age",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
age_importance
set.seed(23)
age_importance <-
feature_importance(feature_name = "Age",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
age_importance
View(preprocessed_test_set)
set.seed(23)
sibsp_importance <-
feature_importance(feature_name = "SibSp",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
sibsp_importance
set.seed(23)
sex_importance <-
feature_importance(feature_name = "male",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
sex_importance
View(preprocessed_test_set)
set.seed(23)
parch_importance <-
feature_importance(feature_name = "Parch",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
parch_importance
set.seed(23)
parch_importance <-
feature_importance(feature_name = "Parch",
test_data = preprocessed_test_set,
labels = test_set$survived,
model = xgb_model,
n_permutations = 400,
acc_ref = acc_ref)
parch_importance
View(preprocessed_test_set)
